Question 1584 . Min Cost to Connect All Points 

class Solution {
public:
    typedef pair<int,int>p;
    // this is used to find minimum spanning tree

    int prims(int V,vector<vector<p>>&adj){
        priority_queue<p,vector<p>,greater<p>>pq;
        pq.push({0,0});

        vector<bool>inMST(V,false);
        int sum=0;
        while(!pq.empty()){
            auto m=pq.top();
            pq.pop();

            int wt=m.first;
            int node=m.second;

            if(inMST[node]==true){
                continue;
            }
            inMST[node]=true;
            sum+=wt;

            for(auto &tmp:adj[node]){
                int neighbor=tmp.first;
                int neighbor_wt=tmp.second;

                if(inMST[neighbor]==false){
                    pq.push({neighbor_wt,neighbor});
                }
            }
        }
        return sum;
    }


     // first find adjecency of each node 

    int minCostConnectPoints(vector<vector<int>>& points) {
        int v=points.size();
        vector<vector<p>>adj(v);

        for(int i=0;i<v;i++){
            for(int j=i+1;j<v;j++){
                int x1=points[i][0];
                int y1=points[i][1];

                int x2=points[j][0];
                int y2=points[j][1];

                int d=abs(x1-x2)+abs(y1-y2);

                adj[i].push_back({j,d});
                adj[j].push_back({i,d});
            }
        }
         return prims(v,adj);
    }
};
