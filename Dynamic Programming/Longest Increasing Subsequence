Ques 300. Longest Increasing Subsequence

class Solution {
public:
    // this is recursion + memoisation 

    // int solve(int i,int prev_i,int size,vector<int>&nums,vector<vector<int>>&dp){
        
    //     if(i==size)return 0;

    //     if(dp[i][prev_i+1]!=-1)return dp[i][prev_i+1];

    //     int len=0+solve(i+1,prev_i,size,nums,dp);

    //     if(prev_i==-1||nums[i]>nums[prev_i]){
    //         len=max(len,1+solve(i+1,i,size,nums,dp));
    //     }
    //     return dp[i][prev_i+1]=len;
    // }



    int lengthOfLIS(vector<int>& nums) {

        int n=nums.size();

    //     vector<vector<int>>dp(n,vector<int>(n+1,-1));
    //     return solve(0,-1,n,nums,dp);

       // Tabulation method

        vector<vector<int>>dp(n+1,vector<int>(n+1));

        for(int i=n-1;i>=0;i--){
            for(int prev_ind=i-1;prev_ind>=-1;prev_ind--){
                int len=0+dp[i+1][prev_ind+1];
                if(prev_ind==-1||nums[i]>nums[prev_ind]){
                   len=max(len,1+dp[i+1][i+1]);
                }
            dp[i][prev_ind+1]=len;
            }
        }
        return dp[0][0];

    }
};
